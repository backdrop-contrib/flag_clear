<?php
/**
 * @file
 * Code for the Flag clear module.
 */

/*
* Implements hook_menu().
*/
function flag_clear_menu() {
  // Remove all user flags for a piece of content.
  $items['unflag/%/%'] = array(
    'title' => 'Unflag this content completely',
    'page arguments' => array(1, 2),
    'page callback' => 'flag_clear_clear',
    'access callback' => 'user_access',
    'access arguments' => array('clear flags'),
    'description' => '',
    'type' => MENU_CALLBACK,
  );
  // Remove a user's flag for a piece of content.
  $items['unflag/user/%/%/%'] = array(
    'title' => 'Unflag this content',
    'page arguments' => array(2, 3, 4),
    'page callback' => 'flag_clear_unflag',
    'access callback' => 'user_access',
    'access arguments' => array('clear flags'),
    'description' => '',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/flag-manager'] = array(
    'title' => 'Flag Manager',
    'description' => 'Manage flags for content',
    'page callback' => 'flag_clear_manager',
    'access arguments' => array('clear flags'),
  );
  return $items;
}

/*
* Implements hook_permission().
*/
function flag_clear_permission() {
  return array(
    'clear flags' => array(
      'title' => t('Clear flags'),
      'description' => t('Clear all flags on entity'),
    ),
  );
}

/*
* Custom menu handler for Flag manager landing page.
*/
function flag_clear_manager() {
  $output = '';
  $flags = flag_get_flags();
  $flag_links = array();
  foreach ($flags as $flag) {
    if (!isset($flag_links[$flag->entity_type])) {
      $flag_links[$flag->entity_type] = array();
    }
    $flag_links[$flag->entity_type][$flag->fid] = $flag->title;
  }

  $flag_paths = array(
    'comment' => 'admin/config/content/flag-manager/comments',
    'node' => 'admin/config/content/flag-manager/content',
    'user' => 'admin/config/content/flag-manager/users',
  );
  foreach ($flag_links as $type => $flag_link) {
    $output .= '
    <div class="admin-panel">
      <h3>' . l(ucwords($type) . ' flags', $flag_paths[$type]) . '</h3>
      <div class="body">
        <ul class="admin-list">';
    foreach ($flag_link as $key => $title) {
      $output .= '<li class="leaf">' . l($title, $flag_paths[$type] . '/' . $key) . '</li>';
    }
    $output .= '
        </ul>
      </div>
    </div>';
  }

  return $output;
}

/*
* Menu callback for completely unflagging a piece of content for all users.
*/
function flag_clear_clear($type = NULL, $entity = NULL) {
  $removed = array();
  // This while loop is necessary due to flag_get_entity_flags functionality.
  // It returns an array with uids as keys, so only 1 anonymous flag per call.
  while ($user_flags = flag_get_entity_flags($type, $entity)) {
    if (empty($user_flags)) {
      break;
    }
    foreach ($user_flags as $user_flag) {
      $key = key($user_flag);
      $uid = $user_flag[$key]->uid;
      // Flag module will often continue to return results that were already removed.
      if (in_array($user_flag[$key]->flagging_id, $removed)) {
        break 2;
      }
      $user = user_load($uid);
      $flag = flag_get_flag($key);
      if ($user->uid > 0) {
        $flag->flag('unflag', $entity, $user, TRUE);
      }
      else {
        $user->name = 'Anonymous';
        // This is necessary until the flag module allows admin users to unflag anonymous flags.
        $result = db_query('DELETE FROM {flagging} WHERE flagging_id = :fid', array(':fid' => $user_flag[$key]->flagging_id));
        $result = db_query('UPDATE {flag_counts} SET count = count - 1 WHERE fid = :fid AND entity_id = :eid',
          array(
            ':fid' => $flag->fid,
            ':eid' => $entity
          )
        );
      }
      $removed[] = $user_flag[$key]->flagging_id;
      drupal_set_message(
        t('Unflagged "@flag" for @type #@entity by @user',
          array(
            '@flag' => $flag->title,
            '@type' => $type,
            '@entity' => $entity,
            '@user' => $user->name
          )
        )
      );
    }
  }

  // Redirect to the entity that has been unflagged.
  $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : $type . '/' . $entity;
  drupal_goto($destination);
}

/*
* Menu callback for unflagging a piece of content for a specific user.
*/
function flag_clear_unflag($flag = NULL, $entity = NULL, $uid = NULL) {
  $user = user_load($uid);
  $flag = flag_get_flag($flag);
  $flag->flag('unflag', $entity, $user, TRUE);
  drupal_set_message(
    t('Unflagged "@flag" for entity #@entity by @user',
      array(
        '@flag' => $flag->title,
        '@entity' => $entity,
        '@user' => $user->name
      )
    )
  );
  // Redirect to the entity that has been unflagged.
  $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : 'node/' . $entity;
  drupal_goto($destination);
}

/**
 * Implements hook_views_api().
 */
function flag_clear_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'flag_clear') . '/includes/views',
  );
}
